__doc__ = """pytest fixtures for bac_advanced_ml.solvers unit tests.

.. codeauthor:: Derek Huang <djh458@stern.nyu.edu>
"""

import numpy as np
import pytest
import scipy.linalg as linalg
from sklearn.datasets import make_spd_matrix


@pytest.fixture(scope="session")
def convex_quad_min(global_seed):
    """Returns objective, gradient, and Hessian for convex quadratic function.

    Objective is multivariate, function of 10 variables. Hessian is randomly
    generated by sklearn.datasets.make_spd_matrix + diagonal matrix while
    coefficients for the linear terms of the function are uniform [-1, 1].

    For quadratic function 0.5 * x'Qx + a'x, solution x* solves Qx* = -a, which
    is solved using scipy.linalg.solve with assume_a="pos".

    Parameters
    ----------
    global_seed : int
        pytest fixture. See top-level conftest.py.

    Returns
    -------
    fobj : function
        Convex, quadratic objective function
    fgrad : function
        Gradient of the objective
    fhess : function
        Hessian of the objective (constant)
    sol : numpy.ndarray
        Global minimizer of the function
    """
    # number of features/dimensionality, PRNG
    n_dim = 10
    rng = np.random.default_rng(global_seed)
    # make positive definite hessian by adding scaled identity matrix
    hess = make_spd_matrix(n_dim, random_state=global_seed)
    hess += 1e-4 * np.eye(n_dim)
    # random linear terms drawn from [-1, 1]
    coef = rng.uniform(low=-1., high=1., size=n_dim)
    # objective function, gradient, and hessian
    fobj = lambda x: 0.5 * x @ hess @ x + coef @ x
    fgrad = lambda x: hess @ x + coef
    fhess = lambda x: hess
    # compute solution using scipy.linalg.solve
    sol = linalg.solve(hess, -coef, check_finite=False, assume_a="pos")
    # return fobj, fgrad, fhess, sol
    return fobj, fgrad, fhess, sol